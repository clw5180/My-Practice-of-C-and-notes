#include <iostream>
#include <string>
#include <vector>

using namespace std;

//我的方案：10ms，占用内存1500k（写了一上午。。。）
//这里其实用二分法就比较麻烦了，可以考虑用++ --来搜索就可以了
//搜索路径类似如下，方向为左，下，左，下。。。
//比如从右上角搜索，大了向左，小了向下。
//这里顺便复习了一下二分法的变种。
/*
 
	---------*-------------*
	         |
			 |
			 |
	    *----*
		|
	*___|
	|
	|
	*
*/

//寻找非减序列“第一个大于等于某个值的数的索引”，
//注意这里无需避免无限循环，因为比如middle=(0+1)/2=0，这里是往左靠的
int BinaryFindBiggerIndex(int target, vector<int>& nums, int _left, int _right)
{
	if (nums.empty())
		return -1;
	//int left = 0;
	//int right = nums.size() - 1;
	int left = _left;
	int right = _right;
	while (left < right)
	{
		int middle = (left + right) / 2;
		if (nums[middle] > target)
			right = middle;    //clw note：这里有个小坑，比如{4,6}，这里middle一定会指向下标靠前的数字4
		                                      //          因此如果写成right = middle - 1就会引发错误！
		else if (nums[middle] < target)
		{
			left = middle + 1;
		}
		else
			return middle;
	}
	if (nums[left] >= target)  //比如在{2,7}找7，这里必须要有等号才可以
		return left; //此时因为上面都是+1或-1，因此left和right都是一样的
	else
		return -1;
}


//寻找非减序列“第一个小于等于某个值的数的索引”
int BinaryFindSmallerIndex(int target, vector<int>& nums, int _left, int _right)
{
	if (nums.empty())
		return -1;
	//int left = 0;
	//int right = nums.size() - 1;
    int left = _left;
	int right = _right;
	while (left < right)
	{
		int middle = (left + right) / 2;
		if (nums[middle] > target)
			right = middle - 1;
		else if (nums[middle] < target)
		{
			//避免无限循环，比如在1,2,3里面找7，如果只left = middle，就会无限循环
			//会在left = 1,middle = (1+2)/2 = 1，nums[middle] < target这个逻辑反复循环
			if (left == middle)
			{
				if (nums[right] <= target)
					left = right;
				break;
			}
			else
			{
				left = middle; //保留小于n的下标以防这是最后一个
			}
			//left = middle;
		}
		else
			return middle;
	}
	if (nums[left] <= target)
		return left; //此时因为上面都是+1或-1，因此left和right都是一样的
	else
		return -1;
}

bool Find(int target, vector<vector<int> > array)
{
	//检查array是否为空，array是否为m*n型的矩阵（不会由参差不齐的vector组成）
	int h = array.size();
	if (h == 0) return false;
	int w = array[0].size();
	for (int i = 0; i < h; ++i)
	{
		if (array[i].size() != w)
			return false;
	}
	int index_h_begin = 0;
	int index_w_end = w - 1;
	int count = 0;
	
	while (1)
	{
		if (count % 2 == 0)
		{
			index_w_end = BinaryFindSmallerIndex(target, array[index_h_begin], 0, index_w_end);
			if (index_w_end == -1 ||
				array[index_h_begin][index_w_end] != target && index_h_begin == h - 1)
				return false;
			else if (array[index_h_begin][index_w_end] == target)
				return true;
		}
		else
		{
			vector<int> tmpVec;
			for (int i = 0; i < h; ++i)
				tmpVec.push_back(array[i][index_w_end]);
			index_h_begin = BinaryFindBiggerIndex(target, tmpVec, index_h_begin, h - 1);
			if (index_h_begin == -1 || 
				array[index_h_begin][index_w_end] != target && index_w_end == 0)
				return false;
			else if (array[index_h_begin][index_w_end] == target)
				return true;
		}
		count++;
	}
	return false;
}

//网友方案：
/*
bool Find(int target, vector<vector<int> > array) 
{
	if (array.empty())return false;
	//if (target < array[0][0])return false;
	int _length = array.size();
	for (int i = 0; i < _length; i++)
	{
		if (array[i].empty())continue;
		else if(target >= array[i][0])
		{
			if (target <= array[i][array[i].size() - 1])
			{
				for (int j = array[i].size() - 1; j >= 0; j--)
				{
					if (target == array[i][j])
						return 1;
					else if (target > array[i][j])
						break;
				}
			}
			else 
			{
				continue;
			}
		}
		else 
			return false;
	}
	return false;
}

*/

int main()
{
	//vector<vector<int>> arr = {};
	//vector<vector<int>> arr = { {} };
	//vector<vector<int>> arr = { {1,2,3},{4,6,7},{8,9,10} };
	//vector<vector<int>> arr = { {1, 2, 8, 9},{4, 7, 10, 13}};
	vector<vector<int>> arr = { {1, 2, 8, 9},{2, 4, 9, 12},{4, 7, 10, 13},{6, 8, 11, 15} };
	//vector<vector<int>> arr = { {1, 2, 8, 9}, { 2, 4, 9, 12 }, { 4, 7, 10, 13 }, { 6, 8, 11, 15 } };
	//vector<vector<int>> arr = { {1,2,3,4},{6,7},{8,9,10} };
	//vector<vector<int>> arr = { {1,2},{3,4,6,7},{8,9,10} };
	//vector<vector<int>> arr = { {1,2},{3,4},{5,6} };
	//vector<vector<int>> arr = { {1,2,3},{4,5,6}};
	//vector<vector<int>> arr = { {1},{2},{3},{4},{5},{6} };
	//vector<vector<int>> arr = { {1, 2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 27, 30, 32, 35, 36, 38, 39, 42, 44, 46, 47, 48, 49, 51, 54, 55, 56}, { 3, 4, 6, 8, 11, 13, 15, 18, 19, 20, 23, 25, 27, 29, 33, 36, 38, 41, 42, 45, 48, 50, 53, 54, 57, 60, 63, 65, 66, 67 }, { 5, 7, 8, 11, 14, 15, 17, 19, 21, 23, 24, 28, 31, 33, 36, 39, 41, 44, 47, 49, 52, 53, 56, 57, 60, 63, 66, 68, 71, 72 }, { 7, 10, 13, 14, 17, 19, 22, 25, 26, 27, 30, 32, 34, 37, 39, 42, 44, 46, 50, 53, 55, 56, 59, 61, 64, 66, 69, 72, 74, 76 }, { 8, 12, 16, 17, 20, 21, 23, 26, 29, 31, 33, 35, 37, 40, 42, 45, 48, 49, 52, 55, 58, 59, 61, 63, 67, 69, 70, 74, 76, 79 }, { 10, 15, 18, 20, 22, 24, 27, 30, 32, 33, 36, 38, 39, 41, 45, 47, 50, 53, 56, 58, 61, 64, 65, 68, 69, 71, 73, 76, 79, 82 }, { 13, 17, 20, 23, 24, 26, 28, 31, 34, 36, 38, 41, 42, 43, 48, 50, 53, 56, 58, 61, 64, 67, 68, 71, 73, 74, 75, 78, 81, 84 }, { 15, 19, 22, 24, 26, 28, 31, 34, 35, 38, 41, 44, 45, 46, 49, 51, 56, 59, 61, 64, 67, 69, 71, 73, 76, 78, 79, 82, 85, 87 }, { 17, 20, 23, 26, 29, 30, 32, 37, 40, 42, 43, 47, 50, 53, 55, 56, 58, 62, 64, 66, 69, 72, 75, 78, 80, 81, 83, 86, 88, 90 }, { 18, 21, 25, 28, 30, 32, 35, 38, 42, 43, 44, 49, 51, 55, 58, 59, 61, 65, 68, 71, 73, 74, 77, 79, 82, 85, 88, 89, 91, 93 }, { 20, 23, 28, 29, 33, 36, 37, 40, 43, 45, 47, 52, 55, 58, 60, 62, 63, 66, 70, 74, 76, 77, 79, 81, 85, 88, 89, 91, 93, 94 }, { 23, 25, 31, 33, 35, 39, 42, 43, 44, 46, 50, 53, 56, 61, 62, 65, 68, 69, 72, 75, 78, 81, 82, 83, 88, 91, 92, 93, 96, 99 }, { 26, 27, 33, 34, 38, 40, 45, 48, 51, 53, 55, 56, 58, 64, 66, 69, 72, 75, 77, 80, 82, 84, 87, 88, 90, 93, 94, 95, 99, 101 }, { 29, 30, 36, 38, 40, 42, 47, 50, 53, 56, 57, 59, 62, 65, 68, 71, 73, 77, 79, 83, 84, 86, 88, 91, 93, 96, 99, 100, 102, 103 }, { 32, 33, 39, 42, 44, 46, 49, 53, 56, 59, 62, 65, 68, 71, 72, 75, 77, 78, 80, 85, 87, 90, 92, 94, 96, 99, 101, 103, 105, 107 }, { 35, 37, 42, 43, 46, 48, 51, 55, 59, 61, 65, 67, 71, 74, 76, 78, 81, 82, 84, 86, 90, 92, 95, 96, 99, 102, 103, 106, 107, 109 }, { 36, 39, 43, 46, 49, 50, 53, 58, 62, 65, 67, 70, 73, 76, 77, 79, 84, 87, 88, 90, 93, 96, 99, 102, 103, 106, 108, 111, 112, 115 }, { 38, 42, 45, 47, 52, 55, 57, 60, 64, 66, 69, 72, 75, 78, 80, 82, 87, 89, 91, 92, 94, 99, 100, 103, 105, 107, 111, 112, 115, 118 }, { 39, 44, 48, 49, 55, 57, 60, 63, 66, 69, 72, 75, 78, 80, 82, 85, 89, 92, 94, 95, 98, 101, 102, 105, 108, 111, 112, 115, 116, 120 }, { 40, 47, 49, 52, 56, 59, 63, 64, 68, 71, 75, 78, 80, 83, 85, 88, 91, 94, 97, 99, 101, 104, 105, 108, 110, 112, 115, 118, 120, 123 }, { 42, 50, 53, 55, 59, 62, 66, 67, 71, 73, 78, 81, 82, 86, 87, 90, 94, 97, 100, 101, 104, 106, 107, 109, 111, 114, 117, 120, 123, 126 }, { 43, 51, 55, 58, 62, 64, 69, 71, 74, 77, 81, 84, 86, 87, 89, 93, 96, 99, 102, 103, 105, 108, 111, 112, 113, 116, 120, 122, 125, 129 }, { 45, 54, 56, 59, 65, 67, 72, 75, 76, 79, 84, 87, 90, 92, 94, 97, 99, 102, 104, 107, 108, 111, 114, 116, 119, 120, 122, 124, 127, 132 }, { 47, 55, 59, 62, 66, 68, 74, 78, 80, 82, 85, 88, 93, 96, 99, 101, 102, 105, 106, 108, 110, 113, 115, 118, 120, 121, 124, 127, 130, 133 }, { 49, 56, 61, 65, 68, 70, 76, 81, 83, 85, 87, 91, 95, 99, 102, 103, 104, 106, 108, 110, 113, 116, 118, 121, 124, 127, 130, 133, 134, 137 }, { 51, 57, 62, 68, 71, 74, 78, 83, 86, 89, 92, 95, 97, 101, 104, 106, 108, 110, 113, 114, 117, 119, 121, 123, 126, 130, 132, 135, 137, 140 }, { 53, 59, 65, 69, 73, 75, 81, 86, 88, 92, 95, 97, 100, 103, 107, 109, 111, 112, 115, 117, 120, 122, 125, 126, 129, 131, 133, 138, 141, 143 }, { 55, 61, 67, 72, 75, 77, 82, 89, 92, 94, 97, 100, 102, 105, 108, 111, 114, 115, 116, 119, 123, 125, 126, 128, 131, 134, 137, 140, 144, 146 }, { 57, 63, 68, 74, 78, 81, 85, 90, 95, 98, 100, 101, 103, 107, 110, 114, 117, 119, 120, 123, 126, 129, 130, 133, 136, 138, 141, 144, 146, 149 }, { 58, 65, 70, 76, 81, 84, 86, 93, 98, 101, 104, 105, 107, 110, 112, 115, 120, 122, 124, 126, 129, 132, 135, 136, 138, 140, 142, 146, 149, 150 }};
	//vector<vector<int>> arr = { {0, 1, 3, 4, 5, 7, 8, 11, 13, 15, 18, 21, 24, 27, 30, 32, 35, 36, 39, 41, 42, 43, 46, 49, 52, 55, 58, 60, 63, 66, 67, 69, 72, 75, 78, 80, 81, 82, 85, 86}, { 1, 4, 6, 8, 11, 12, 15, 17, 18, 20, 23, 24, 27, 30, 33, 34, 38, 39, 42, 44, 47, 48, 51, 52, 55, 57, 59, 62, 64, 67, 70, 72, 75, 77, 81, 83, 84, 87, 90, 91 }, { 4, 7, 8, 11, 14, 16, 18, 20, 21, 24, 27, 29, 32, 35, 36, 39, 40, 42, 44, 46, 49, 52, 54, 56, 58, 60, 61, 64, 67, 70, 73, 76, 78, 81, 84, 87, 89, 91, 93, 96 }, { 5, 8, 10, 13, 15, 19, 21, 23, 24, 27, 29, 31, 34, 37, 38, 41, 43, 45, 46, 49, 52, 55, 58, 59, 61, 64, 67, 69, 71, 72, 76, 78, 79, 83, 87, 90, 91, 94, 96, 97 }, { 6, 11, 14, 16, 18, 22, 24, 27, 29, 32, 33, 35, 36, 40, 42, 44, 47, 50, 51, 52, 54, 58, 60, 62, 64, 67, 70, 73, 76, 79, 82, 84, 87, 88, 91, 94, 97, 99, 101, 102 }, { 9, 13, 16, 19, 21, 23, 25, 29, 31, 35, 38, 39, 42, 45, 48, 51, 54, 56, 57, 60, 63, 64, 67, 69, 72, 73, 74, 76, 79, 81, 85, 88, 90, 92, 95, 98, 100, 101, 104, 106 }, { 10, 16, 19, 22, 24, 26, 29, 31, 34, 36, 40, 41, 45, 46, 50, 54, 56, 59, 60, 63, 66, 69, 70, 72, 75, 77, 79, 81, 83, 85, 88, 91, 93, 96, 98, 99, 102, 105, 107, 109 }, { 12, 18, 22, 25, 26, 29, 32, 33, 37, 39, 42, 44, 47, 50, 52, 57, 59, 61, 62, 66, 68, 71, 72, 74, 76, 80, 82, 84, 87, 90, 92, 94, 95, 98, 101, 102, 105, 107, 109, 112 }, { 14, 20, 25, 27, 30, 32, 35, 37, 40, 43, 44, 47, 49, 52, 54, 58, 60, 63, 65, 68, 70, 73, 75, 76, 78, 83, 84, 86, 89, 92, 93, 97, 99, 101, 103, 104, 107, 110, 113, 116 }, { 17, 23, 28, 29, 32, 33, 38, 40, 42, 46, 49, 50, 52, 55, 56, 60, 63, 65, 68, 71, 74, 75, 78, 81, 84, 87, 89, 92, 95, 96, 99, 100, 102, 104, 106, 108, 110, 113, 115, 118 }, { 18, 25, 30, 31, 35, 38, 41, 43, 45, 48, 52, 53, 55, 58, 60, 62, 66, 67, 70, 73, 76, 77, 79, 82, 86, 89, 92, 95, 98, 101, 102, 103, 106, 109, 111, 112, 114, 117, 119, 122 }, { 21, 28, 32, 34, 38, 40, 42, 45, 47, 50, 53, 56, 59, 60, 61, 63, 69, 71, 74, 75, 78, 80, 83, 84, 87, 90, 93, 98, 100, 104, 107, 110, 111, 113, 116, 117, 118, 120, 122, 123 }, { 23, 29, 34, 36, 41, 43, 46, 49, 52, 54, 55, 58, 60, 63, 65, 67, 72, 74, 75, 77, 80, 82, 85, 88, 91, 94, 97, 100, 103, 106, 110, 113, 114, 116, 119, 122, 124, 125, 126, 129 }, { 24, 31, 35, 37, 43, 46, 48, 50, 55, 58, 60, 62, 63, 65, 68, 69, 73, 75, 78, 80, 81, 85, 86, 89, 93, 96, 99, 103, 106, 108, 113, 116, 118, 120, 122, 125, 128, 130, 132, 133 }, { 25, 33, 38, 41, 45, 47, 51, 53, 58, 60, 63, 65, 66, 68, 70, 72, 74, 77, 80, 82, 83, 86, 88, 91, 94, 97, 100, 106, 107, 109, 115, 119, 121, 122, 124, 126, 129, 131, 135, 136 }, { 27, 34, 39, 43, 46, 48, 54, 55, 60, 63, 66, 69, 70, 73, 75, 76, 77, 79, 83, 84, 87, 90, 93, 95, 98, 99, 103, 109, 110, 113, 116, 121, 124, 126, 128, 131, 133, 136, 137, 139 }, { 30, 35, 42, 46, 48, 50, 57, 60, 63, 65, 68, 71, 74, 77, 78, 81, 82, 84, 86, 88, 91, 94, 97, 99, 101, 102, 105, 112, 113, 114, 119, 124, 127, 129, 132, 134, 137, 140, 142, 145 }, { 33, 36, 45, 48, 51, 54, 60, 63, 66, 67, 71, 74, 77, 80, 82, 84, 85, 88, 91, 92, 95, 97, 98, 101, 103, 106, 108, 113, 115, 116, 121, 125, 129, 132, 134, 135, 140, 141, 143, 148 }, { 36, 39, 47, 50, 54, 55, 63, 66, 69, 70, 72, 76, 79, 82, 84, 86, 88, 90, 92, 95, 98, 101, 102, 104, 106, 109, 110, 116, 119, 122, 123, 128, 131, 134, 135, 136, 142, 144, 147, 150 }, { 37, 40, 50, 53, 56, 57, 64, 67, 71, 73, 75, 79, 81, 85, 86, 88, 90, 93, 95, 96, 100, 103, 105, 108, 110, 112, 113, 117, 121, 125, 127, 131, 133, 135, 137, 139, 143, 147, 150, 153 }, { 39, 43, 53, 55, 58, 60, 67, 70, 72, 76, 78, 82, 84, 88, 90, 91, 92, 95, 96, 98, 103, 105, 108, 110, 112, 115, 116, 118, 124, 128, 130, 134, 137, 139, 141, 143, 144, 150, 153, 156 }, { 41, 45, 54, 58, 59, 63, 70, 72, 75, 79, 82, 84, 87, 91, 93, 94, 96, 98, 99, 100, 106, 107, 111, 113, 116, 118, 121, 122, 127, 131, 133, 136, 140, 141, 143, 146, 148, 153, 156, 157 }, { 42, 46, 56, 60, 63, 65, 72, 73, 76, 81, 85, 87, 90, 93, 95, 97, 99, 102, 103, 106, 109, 111, 114, 116, 117, 121, 123, 125, 130, 133, 136, 137, 142, 145, 147, 149, 151, 155, 159, 161 }, { 45, 47, 58, 62, 66, 69, 73, 74, 77, 82, 86, 89, 91, 94, 98, 100, 103, 105, 108, 110, 113, 114, 117, 119, 122, 124, 126, 129, 131, 136, 139, 140, 143, 148, 149, 151, 153, 157, 160, 162 }, { 48, 49, 59, 63, 67, 70, 75, 77, 80, 85, 89, 92, 94, 97, 100, 102, 104, 106, 111, 113, 115, 117, 120, 123, 126, 128, 131, 134, 136, 138, 141, 142, 145, 150, 152, 154, 157, 160, 163, 166 }, { 49, 52, 61, 66, 68, 71, 78, 79, 82, 86, 90, 93, 97, 98, 101, 104, 107, 109, 112, 115, 118, 120, 123, 125, 128, 131, 133, 136, 139, 140, 144, 147, 149, 153, 155, 158, 159, 163, 166, 168 }, { 50, 55, 63, 67, 70, 73, 80, 83, 85, 88, 93, 96, 99, 102, 104, 106, 110, 113, 115, 118, 121, 124, 126, 128, 131, 133, 136, 138, 142, 144, 147, 149, 152, 155, 158, 160, 161, 165, 169, 170 }, { 51, 57, 65, 69, 72, 75, 82, 84, 87, 89, 96, 97, 101, 105, 107, 108, 111, 114, 117, 120, 123, 127, 128, 131, 132, 136, 139, 141, 144, 147, 148, 152, 153, 157, 160, 162, 164, 167, 171, 173 }, { 54, 59, 66, 70, 75, 78, 84, 86, 90, 91, 97, 100, 103, 107, 110, 113, 115, 118, 121, 122, 125, 128, 130, 133, 135, 137, 141, 143, 145, 149, 151, 155, 156, 158, 162, 164, 167, 170, 174, 176 }, { 55, 62, 69, 71, 78, 81, 86, 89, 92, 94, 100, 101, 105, 108, 113, 116, 118, 121, 124, 126, 128, 129, 132, 135, 137, 139, 143, 146, 149, 152, 155, 157, 159, 160, 164, 167, 170, 172, 175, 178 }, { 56, 65, 71, 72, 80, 84, 88, 91, 95, 98, 101, 103, 107, 111, 115, 118, 121, 124, 126, 129, 131, 133, 134, 137, 140, 143, 145, 149, 151, 153, 158, 161, 163, 165, 167, 170, 173, 176, 178, 181 }, { 58, 68, 72, 75, 81, 86, 91, 94, 98, 101, 103, 106, 109, 114, 117, 119, 122, 125, 129, 131, 134, 136, 138, 140, 143, 146, 148, 150, 153, 156, 160, 163, 166, 169, 170, 172, 175, 178, 179, 182 }, { 59, 70, 75, 77, 82, 87, 92, 97, 100, 103, 106, 108, 111, 117, 120, 123, 126, 128, 132, 134, 136, 139, 141, 143, 145, 149, 151, 153, 155, 157, 162, 165, 169, 171, 172, 175, 177, 180, 183, 185 }, { 61, 73, 78, 80, 85, 90, 94, 99, 101, 105, 107, 110, 113, 120, 123, 126, 129, 131, 134, 136, 139, 140, 142, 146, 147, 152, 154, 156, 158, 160, 164, 167, 171, 174, 176, 177, 180, 183, 184, 187 }, { 64, 75, 79, 82, 87, 92, 97, 101, 104, 108, 111, 113, 116, 123, 126, 128, 132, 135, 138, 139, 140, 143, 146, 149, 150, 155, 157, 159, 161, 162, 167, 168, 174, 176, 179, 181, 182, 186, 189, 191 }, { 66, 77, 80, 85, 88, 95, 100, 103, 107, 111, 112, 116, 117, 126, 129, 131, 135, 137, 139, 141, 142, 144, 149, 151, 153, 156, 159, 162, 165, 166, 170, 172, 175, 179, 181, 184, 185, 188, 191, 193 }, { 67, 79, 81, 87, 91, 96, 103, 106, 110, 112, 115, 118, 120, 127, 132, 134, 136, 139, 141, 144, 147, 150, 152, 155, 157, 159, 161, 164, 167, 169, 171, 173, 177, 181, 183, 185, 188, 190, 193, 196 }, { 69, 81, 83, 89, 92, 97, 104, 109, 111, 113, 118, 120, 123, 129, 133, 137, 139, 140, 143, 145, 148, 153, 156, 158, 160, 161, 164, 167, 170, 173, 175, 176, 178, 184, 187, 188, 190, 193, 196, 198 }, { 71, 82, 84, 91, 95, 100, 107, 111, 114, 116, 121, 124, 127, 132, 135, 140, 141, 142, 144, 147, 150, 155, 157, 159, 163, 164, 165, 169, 172, 176, 177, 179, 180, 186, 188, 190, 192, 195, 199, 201 }, { 73, 83, 85, 92, 96, 103, 108, 114, 117, 120, 123, 125, 130, 135, 137, 143, 146, 149, 151, 152, 155, 157, 160, 161, 164, 167, 168, 170, 173, 178, 181, 184, 185, 189, 191, 193, 195, 198, 201, 204 }};




	cout << Find(22, arr) << endl;
	//cout << Find(6, arr) << endl;
	return 0;
}